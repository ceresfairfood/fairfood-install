#!/bin/bash
#
# bash is needed to `source` rbenv stuff

# Fail on any error
set -e

# Go to the working tree
cd "$GIT_DIR/.." || exit 1

# $GIT_DIR is '.' which is not valid any more
unset GIT_DIR

# Setup environment
APP_ROOT="$(pwd)"
export RAILS_ENV="{{ rails_env }}"

upgrade_application() {
  local action="${1:-upgrade}"

  echo "RAILS_ENV=$RAILS_ENV"

  source script/rbenv-init.sh
  ./script/rbenv-install.sh
  ./script/install-bundler

  # Install the required gems
  bundle config set --local deployment "true"
  bundle config set --local path "$HOME/.gem"
  bundle config set --local without "development test"
  bundle install | grep -v '^Using'

  ./script/precompile-assets

  echo "Migrating database (db:migrate)..."
  bundle exec rake db:migrate

  if [ "$RAILS_ENV" = "production" ]; then
    echo "Upload public/assets/ to CDN (live:upload_assets)..."
    bundle exec rake live:upload_assets

    echo "Install schedule cron jobs (whenever)..."
    # TODO: make schedule server agnostic
    # uncomment once old prod server crontab is removed
    # bundle exec whenever --set "environment=$RAILS_ENV" --update-crontab "{{ app_user }}"
  fi

  # Restart DJ workers
  # uncomment once old prod server delayed_job is stopped
  # ./script/delayed_job restart

  # Restart or reload unicorn
  echo "Unicorn $action..."
  /etc/init.d/unicorn_fairfood "$action"
  #/etc/init.d/unicorn_fairfood stop && while /etc/init.d/unicorn_fairfood start 2>&1 | grep -Fxq "Already running"; do sleep 0.1; done

  echo "Update the static 500.html page for nginx..."
  # Delete it first so that nginx is not delivering the old version:
  rm public/500.html
  # Then save the new version. Don't pipe it directly, because that will create the file before the request and nginx will deliver an empty file.
  wget --content-on-error https://members.ceresfairfood.org.au/500 -O tmp/500.html 2>&1 | egrep -i 'sav|wget:' # reduce output to only include success or fail results.
  mv tmp/500.html public/
}

while read oldrev newrev refname; do
  echo "HEAD was at $oldrev"
  if [ "$refname" = "refs/heads/master" ]; then
    # Checkout the new revision
    git reset --hard "$newrev"
    upgrade_application
  fi
done

exit 0
