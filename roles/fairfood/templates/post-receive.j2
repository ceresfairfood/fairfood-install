#!/bin/bash
#
# bash is needed to `source` rbenv stuff

# Fail on any error
set -e

# Go to the working tree
cd "$GIT_DIR/.." || exit 1

# $GIT_DIR is '.' which is not valid any more
unset GIT_DIR

# Setup environment
APP_ROOT="$(pwd)"
export RAILS_ENV="{{ rails_env }}"
export DOMAIN="{{ domain }}"
export JOBS="{{ background_jobs }}"

upgrade_application() {
  local restart_mode="${1:-cold}"

  echo "RAILS_ENV=$RAILS_ENV"

  source script/rbenv-init.sh
  ./script/rbenv-install.sh
  ./script/install-bundler

  # Install the required gems
  bundle install

  ./script/precompile-assets

  echo "Migrating database (db:migrate)..."
  bundle exec rake db:migrate

  if [ "$RAILS_ENV" = "production" ]; then
    echo "Upload public/assets/ to CDN (live:upload_assets)..."
    bundle exec rake live:upload_assets

    if [ "$JOBS" = "true" ]; then
      echo "Install schedule cron jobs (whenever)..."
      # TODO: make schedule server-agnostic so it can run on staging too
      bundle exec whenever --set "environment=$RAILS_ENV" --update-crontab "{{ app_user }}"
    fi
  fi

  if [ "$JOBS" = "true" ]; then
    # Restart DJ workers
    ./script/delayed_job restart
  fi

  echo "Restart puma..."
  ./script/restart-puma "$restart_mode"


  echo "Check homepage" # and abort if any http errors
  StartDate=$(date -u +"%s")
  curl --head --silent --show-error --fail  "https://$DOMAIN/" | head -n1
  FinalDate=$(date -u +"%s")

  echo -n "Measured restart delay: "
  date -u -d "0 $FinalDate seconds - $StartDate seconds" +"%H:%M:%S"

  echo "Update the 404 page static cache..." # for rails
  generate_page "404"

  echo "Update the 500 page static cache..." # for rails and nginx
  generate_page "500"

  # Clean up any old gems
  bundle clean

  echo "
    Deployment successful.
  "
}

generate_page() {
  # Delete it first so that nginx is not delivering the old version:
  rm -f public/$1.html
  # Then save the new version. Don't pipe it directly, because that will create the file before the request and nginx will deliver an empty file.
  # wget will report an error and we ignore that here.
  wget --append-output "tmp/wget.log" --content-on-error "https://$DOMAIN/$1" -O "tmp/$1.html" 2>&1 || true
  mv tmp/$1.html public/
}

while read oldrev newrev refname; do
  echo "HEAD was at $oldrev"
  if [ "$refname" = "refs/heads/master" ]; then
    # Find out if major dependencies changed
    set +e
    git diff --quiet "$newrev" -- ".ruby-version"; ruby_changed=$?
    git diff "$newrev" -- "Gemfile.lock" | grep -q "\+\s*puma"; puma_unchanged=$? #how to negate this?
    set -e

    if [[ $ruby_changed -ne 0 || $puma_unchanged -eq 0 ]]; then
      restart_mode="cold" # Full stop/start
    else
      restart_mode="hot" # Quicker restart of workers
    fi
    echo "restart_mode:" $restart_mode

    # Checkout the new revision
    git reset --hard "$newrev"
    upgrade_application "$restart_mode"
  fi
done

exit 0
