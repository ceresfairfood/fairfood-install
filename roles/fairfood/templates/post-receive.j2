#!/bin/bash
#
# bash is needed to `source` rbenv stuff

# Fail on any error
#set -e # disabled because precompile-assets sometimes returns error exit code

# Go to the working tree
cd "$GIT_DIR/.." || exit 1

# $GIT_DIR is '.' which is not valid any more
unset GIT_DIR

# Setup environment
APP_ROOT="$(pwd)"
export RAILS_ENV="{{ rails_env }}"

upgrade_application() {
  local action="${1:-reload}"

  echo "RAILS_ENV=$RAILS_ENV"

  source script/rbenv-init.sh
  ./script/rbenv-install.sh
  ./script/install-bundler

  # Install the required gems
  bundle --path "$HOME/.gem" --deployment --without "development" "test" | sed /^Using.*$/d

  ./script/precompile-assets # sometimes returns error exit code

  echo "Migrating database (db:migrate)..."
  bundle exec rake db:migrate

  if [ "$RAILS_ENV" = "production" ]; then
    echo "Upload public/assets/ to CDN (live:upload_assets)..."
    bundle exec rake live:upload_assets

    echo "Install schedule cron jobs (whenever)..."
    # TODO: make schedule server agnostic
    bundle exec whenever --set "environment=$RAILS_ENV" --update-crontab "{{ app_user }}"
  fi

  # Restart DJ workers
  ./script/delayed_job restart

  # Restart or reload unicorn
  echo "Unicorn $action..."
  /etc/init.d/unicorn_fairfood "$action"
  #/etc/init.d/unicorn_fairfood stop && while /etc/init.d/unicorn_fairfood start 2>&1 | grep -Fxq "Already running"; do sleep 0.1; done

  echo "Update the static 500.html page for nginx..."
  # Delete it first so that nginx is not delivering the old version:
  rm public/500.html
  # Then save the new version. Don't pipe it directly, because that will create the file before the request and nginx will deliver an empty file.
  wget https://members.ceresfairfood.org.au/500 -O tmp/500.html 2>&1 | egrep 'saved|wget:' # reduce output to only include success or fail results.
  mv tmp/500.html public/

  # tell bugsnag about the deploy, keeps the error history clean
  #bundle exec rake bugsnag:deploy TO="$RAILS_ENV"
}

while read oldrev newrev refname; do
  echo "HEAD was at $oldrev"
  if [ "$refname" = "refs/heads/master" ]; then
  # Check if ruby or gems changed
  if git diff --quiet "$newrev" -- ".ruby-version" "Gemfile.lock"; then
    # no changes
    action="reload"
  else
    # we need to start a new master process
    action="upgrade"
  fi
  # Checkout the new revision
  git reset --hard "$newrev"
  upgrade_application "$action"
  fi
done

exit 0
