#!/bin/bash
#
# bash is needed to `source` rbenv stuff

# Fail on any error
set -e

# Go to the working tree
cd "$GIT_DIR/.." || exit 1

# $GIT_DIR is '.' which is not valid any more
unset GIT_DIR

# Setup environment
APP_ROOT="$(pwd)"
export RAILS_ENV="{{ rails_env }}"
export DOMAIN="{{ domain }}"
export JOBS="{{ background_jobs }}"

upgrade_application() {
  local action="${1:-upgrade}"

  echo "RAILS_ENV=$RAILS_ENV"

  echo "Stop job workers gracefully..."
  systemctl --user --no-block stop "jobs-{{ app }}.service"

  source script/rbenv-init.sh
  ./script/rbenv-install.sh
  ./script/install-bundler

  # Install the required gems
  bundle install

  ./script/precompile-assets

  echo "Migrating database (db:migrate)..."
  bundle exec rake db:migrate

  if [ "$RAILS_ENV" = "production" ]; then
    echo "Upload public/assets/ to CDN (live:upload_assets)..."
    bundle exec rake live:upload_assets

    if [ "$JOBS" = "true" ]; then
      echo "Install schedule cron jobs (whenever)..."
      # TODO: make schedule server-agnostic so it can run on staging too
      bundle exec whenever --set "environment=$RAILS_ENV" --update-crontab "{{ app_user }}"
    fi
  fi

  if [ "$JOBS" = "true" ]; then
    # Restart DJ workers
    ./script/delayed_job restart
  fi

  echo "Restart puma..."
  bundle exec pumactl restart # Hot restart helps reduce downtime

  echo "Restarting job workers..."
  systemctl --user restart "jobs-{{ app }}.service"

  # Ansible fails to interact with user services.
  # But it's super-fast and idempotent. So we do it here.
  systemctl --user enable jobs-fairfood.service

  echo "Check homepage" # and abort if any http errors
  curl -IsS --fail  https://$DOMAIN/ | head -n1

  echo "Update the 404 page static cache..." # for rails
  generate_page "404"

  echo "Update the 500 page static cache..." # for rails and nginx
  generate_page "500"

  # Clean up any old gems
  bundle clean

  echo "
    Deployment successful.
  "
}

generate_page() {
  # Delete it first so that nginx is not delivering the old version:
  rm -f public/$1.html
  # Then save the new version. Don't pipe it directly, because that will create the file before the request and nginx will deliver an empty file.
  # wget will report an error and we ignore that here.
  wget --append-output "tmp/wget.log" --content-on-error "https://$DOMAIN/$1" -O "tmp/$1.html" 2>&1 || true
  mv tmp/$1.html public/
}

while read oldrev newrev refname; do
  echo "HEAD was at $oldrev"
  if [ "$refname" = "refs/heads/master" ]; then
    # Checkout the new revision
    git reset --hard "$newrev"
    upgrade_application
  fi
done

exit 0
