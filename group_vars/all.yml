# Configuration for all the things.

app_name: fairfood
app: "{{ app_name }}"

app_user: "members.ceresfairfood.org.au"
app_user_home: "/srv/{{ app_user }}"

metabase_version: v0.39.3
metabase_user: "metabase"
metabase_user_home: "/home/{{ metabase_username }}"

app_root: "{{ app_user_home }}"
current_path: "{{ app_root }}/current"
config_path: "{{ current_path }}/config"
build_path: "{{ current_path }}"

log_path: "{{ current_path }}/log"
pid_path: "{{ current_path }}/tmp/pids"
sock_path: "{{ current_path }}/tmp/socks"

#domain: "members.ceresfairfood.org.au"
domain: "{{ inventory_hostname }}"
metabase_domain: "metabase.ceresfairfood.org.au"

https: false

rails_env: "staging"

#----------------------------------------------------------------------
# Database variables
db_user: "fairfood"
db_name: "fairfood_{{ rails_env }}"
# Created with something like:
#
#   RAILS_ENV=staging ./bin/rails db:create db:schema:load
#   mysqldump fairfood_production > files/fairfood_schema.sql
#
mysql_data_file: "fairfood_schema.sql"

# Metabase query database
metabase_db_user: "metabase"
metabase_db_name: "fairfood_metabase"
metabase_data_file: "fairfood_schema.sql"

#----------------------------------------------------------------------
# Unicorn variables
# User name for the unprivileged user which runs unicorn
unicorn_user: "{{ app_user }}"
unicorn_config: "{{ app_root }}/unicorn.rb"
unicorn_log: "{{ log_path }}/unicorn.log"
unicorn_pid: "{{ pid_path }}/unicorn.pid"
unicorn_sock: "{{ sock_path }}/unicorn.sock"
unicorn_workers: 3
unicorn_timeout: 60



#----------------------------------------------------------------------
# nginx config
#
# Use of `deferred` delays handling a request until the client sent data.

nginx_sites_available:
  default:
    - |
      listen 80 default_server deferred;
      listen [::]:80 default_server deferred;
      server_name _;
      access_log off;
      # nginx code to close the connection without sending any data:
      return 444;

  fairfood_http:
    - |
      listen 80 deferred;
      listen [::]:80 deferred;
      server_name {{ domain }};

      add_header X-Content-Type-Options nosniff;
      add_header X-Xss-Protection "1; mode=block";
      add_header X-Frame-Options DENY;
      add_header Strict-Transport-Security "max-age=31536000";

      root "{{ current_path }}/public";

      gzip on;
      gzip_disable "msie6";

      try_files $uri @unicorn;
      location @unicorn {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_pass http://unicorn;
      }

      location ~ ^/(assets)/ {
        gzip_static on;
        expires max;
        add_header Cache-Control public;
      }

      error_page 500 502 503 504 /500.html;
      client_max_body_size 4G;
      keepalive_timeout 60;

  fairfood_http_to_https_redirect:
    - |
      listen 80 deferred;
      listen [::]:80 deferred;
      server_name {{ domain }};

      add_header X-Content-Type-Options nosniff;
      add_header X-Xss-Protection "1; mode=block";
      add_header X-Frame-Options DENY;
      #add_header Content-Security-Policy "default-src self";

      location / {
        return 301 https://$server_name$request_uri;
      }

  fairfood_https:
    - |
      listen 443 ssl deferred;
      listen [::]:443 ssl deferred;
      server_name {{ domain }};
      root "{{ current_path }}/public";

      ssl_certificate      /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
      ssl_certificate_key  /etc/letsencrypt/live/{{ domain }}/privkey.pem;

      include /etc/letsencrypt/options-ssl-nginx.conf;
      ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

      add_header X-Content-Type-Options nosniff;
      add_header X-Xss-Protection "1; mode=block";
      add_header X-Frame-Options DENY;
      add_header Strict-Transport-Security "max-age=31536000";

      gzip on;
      gzip_disable "msie6";

      try_files $uri/index.html $uri @unicorn;

      # Block scanning for scripts efficiently.
      location ~ \.php$ {
        return 404;
      }

      location @unicorn {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_pass http://unicorn;
      }

      location ~ ^/(assets)/ {
        gzip_static on;
        expires max;
        add_header Cache-Control public;
      }

      error_page 500 502 503 504 /500.html;
      client_max_body_size 4G;
      keepalive_timeout 60;

  # Metabase
  metabase_http_to_https_redirect:
    - |
      listen 80;
      # listen [::]80; ## This doesn't work, I forget why
      server_name {{ metabase_domain }};

      add_header X-Content-Type-Options nosniff;
      add_header X-Xss-Protection "1; mode=block";
      add_header X-Frame-Options DENY;
      #add_header Content-Security-Policy "default-src self";

      location / {
        return 301 https://$server_name$request_uri;
      }
  metabase_https:
    - |
      listen 443 ssl;
      # listen [::]:443 ssl;
      server_name {{ metabase_domain }};

      ssl_certificate      /etc/letsencrypt/live/{{ metabase_domain }}/fullchain.pem;
      ssl_certificate_key  /etc/letsencrypt/live/{{ metabase_domain }}/privkey.pem;

      include /etc/letsencrypt/options-ssl-nginx.conf;
      ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

      add_header X-Content-Type-Options nosniff;
      add_header X-Xss-Protection "1; mode=block";
      add_header X-Frame-Options DENY;
      add_header Strict-Transport-Security "max-age=31536000";

      gzip on;
      gzip_disable "msie6";

      # Metabase
      location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://127.0.0.1:3000;
      }

      # Block scanning for scripts efficiently.
      location ~ \.php$ {
        return 404;
      }

      client_max_body_size 4G;
      keepalive_timeout 60;

  # Status (for collectd-wormly)
  nginx_status:
    - |
      listen 8081;

      location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
      }

nginx_events_params:
  - worker_connections 768

nginx_configs:
  upstream:
    # For running Unicorn behind nginx, it is recommended to set “fail_timeout=0” for in your nginx configuration
    # https://www.rubydoc.info/gems/unicorn/Unicorn%2FConfigurator:timeout
    - upstream unicorn { server unix:{{ unicorn_sock }} fail_timeout=0; }
